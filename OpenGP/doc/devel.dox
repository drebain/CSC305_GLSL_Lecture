<!-- ====================================================================== -->
/*! \page devel Development Guide
<!-- ====================================================================== -->

\tableofcontents

<!-- ---------------------------------------------------------------------- -->
\section coding_conventions Coding Conventions
<!-- ---------------------------------------------------------------------- -->

If you would like to contribute to OpenGP please make sure
your code adheres to the following coding conventions. For
general best practices we recommend consulting the JSF coding
standard available
<a href="www.stroustrup.com/JSF-AV-rules.pdf">here</a>.


<!-- ---------------------------------------------------------------------- -->
\subsection naming_conventions Naming Conventions
<!-- ---------------------------------------------------------------------- -->


\subsubsection types Types

The names of user-defined types (such as classes, structs and
enums) are begin with a capital letter. Words within the name are
written camelcase. Acronyms are written in all capital letters. The
names of persons such as Cholesky or Delaunay are properly
capitalized as well.

\code
class SparseMatrix { ... };
enum RGBColors { red, green, blue };
class SparseCholeskySolver { ... };
\endcode


\subsubsection functions Functions

Function names are written in lower-case letters only. Words
within the function name are separated by underscores.

\code
class ExampleClassName
{
public:
    double example_function_name(void);
};
\endcode


\subsubsection variables Variables

Variables are named in lower-case letters only. Words within
the variable name are separated by underscores. Member
variables have a trailing underscore as a prefix (suffix: obsolete).

\code
int globals_considered_harmful;

class ExampleClassName
{
protected:
    double _member_variable_name;
    static double _static_variable_name;
};
\endcode


\subsubsection filenames File Names

 File names follow the naming rules for user-defined types. Implementation
files end with <code>.cpp</code> and header files end with
<code>.h</code>. Examples: <code>SparseMatrix.cpp</code> for the
implementation file. <code>SparseMatrix.h</code> for the header
file.


<!-- ---------------------------------------------------------------------- -->
\subsection formatting Formatting
<!-- ---------------------------------------------------------------------- -->

\subsubsection blocks Blocks
The expressions following an <code>if, else, while, do ... while </code> or
<code>for</code> statement should always be enclosed in braces. The braces
enclosing a block should be placed in the same column, on separate lines.

\code
if (foo_bar == baz){
    std::cout << "hurz" << std::endl;
}
else{
    std::cout << "asdf" << std::endl;
}
\endcode

\subsubsection comments Comments
C++-style comments should be used, i.e. <code>// My important comment.</code>

\subsubsection linelength Line Length
Lines should not exceed more than 80 characters.
There should only be one statement per line.

\subsubsection indentation Indentation
Use spaces instead of tabs. Indent the code by four spaces for each
level of indentation. Avoid trailing whitespaces at the end of a
line as well as on empty lines.


<!-- ---------------------------------------------------------------------- -->
\subsection programming_conventions Programming Conventions
<!-- ---------------------------------------------------------------------- -->

This section describes some basic programming conventions
developers should adhere to in order to avoid common pitfalls.

<ul>
<li>
<p>
        Use header guards in order to protect against multiple
        inclusion. We use #pragma once which is widely adopted by
        many modern C++ compilers. For the file YourClass.h
        the header guard should look like this:
</p>
<p>
\code
#pragma once
class YourClass{
    ///...
}
\endcode
</p>
</li>
<li>
<p>
        Use the OpenGP namespace in order to avoid
        conflicts. In source files, do not add an additional level of
        indentation due to the namespace:
</p>
<p>
\code
namespace OpenGP {

class ExampleClass
{
...
};

}
\endcode
</p>
</li>
</ul>

<!-- ---------------------------------------------------------------------- -->
\section update_doxygen Updating Published Doxygen
<!-- ---------------------------------------------------------------------- -->
These commands will re-compile and then update the documentation published on GitHub: 
\code
~/Developer/OpenGP/build: make doxygen
~/Developer/OpenGP/build: cd doc
~/Developer/OpenGP/build/doc: git init
~/Developer/OpenGP/build/doc: git add .
~/Developer/OpenGP/build/doc: git commit -m "updated doc"
~/Developer/OpenGP/build/doc: git remote rm origin
~/Developer/OpenGP/build/doc: git remote add origin https://github.com/OpenGP/OpenGP.github.io.git
~/Developer/OpenGP/build/doc: git push origin master --force
\endcode
Alternatively, this is conveniently wrapped by the following:
\code
~/Developer/OpenGP/build: make publish_doc
\endcode



<!-- ====================================================================== -->
*/
<!-- ====================================================================== -->
